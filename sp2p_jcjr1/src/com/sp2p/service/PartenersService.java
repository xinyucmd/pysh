package com.sp2p.service;import java.sql.Connection;import java.sql.SQLException;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringEscapeUtils;import org.apache.commons.lang.StringUtils;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.shove.base.BaseService;import com.shove.data.DataException;import com.shove.data.dao.MySQL;import com.shove.vo.PageBean;import com.sp2p.dao.PartenersDao;public class PartenersService extends BaseService {	private PartenersDao partenersDao;		public static Log log = LogFactory.getLog(PartenersService.class);	public Map<String,String> queryParteners(long id) throws Exception{		Connection conn = MySQL.getConnection();		Map<String,String> ps;		try {			ps = partenersDao.queryPartenersByConditions(conn, id);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * 判断客户是否是广告商推荐过来的	 * @param conn	 * @param userId	 * @return	 * @throws SQLException	 * @throws DataException	 */	public Map<String,String> queryPartenersUser(long userId) throws Exception{		Connection conn = MySQL.getConnection();		Map<String,String> ps;		try {			ps = partenersDao.queryPartenersUser(conn, userId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * 融360查看标的列表	 * @return	 * @throws Exception 	 */	public void getborrowDataListTo360(PageBean<Map<String, Object>> pageBean) throws Exception{		StringBuffer condition = new StringBuffer();		condition.append(" and borrowWay != 6");		condition.append(" and progress < 1");		condition.append(" and status > -1");		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_t_borrow_rong360", "*", "", condition.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}		/**	 * 融360查看单个项目信息	 * @return	 * @throws Exception 	 */	public List<Map<String, Object>> getborrowDataTo360(long product_id) throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps;		try {			ps = partenersDao.getborrowDataTo360(conn, product_id);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * 查询希财平台用户统计	 * @return	 * @throws Exception	 */	public void queryUserXc(PageBean<Map<String, Object>> pageBean,String startdate,String enddate) throws Exception{		StringBuffer condition = new StringBuffer();		//condition.append(" and id = 5 ");		if(StringUtils.isNotBlank(startdate) && StringUtils.isNotBlank(enddate)){			condition.append("  and  regtime>='"+startdate+"' and regtime<='"+enddate+"'");		}		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_t_user_xc", "*", "", condition.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}		public void querySbydate(PageBean<Map<String, Object>> pageBean) throws Exception{		StringBuffer condition = new StringBuffer();		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_t_jiumeng_user", "*", " order by createTime desc ", condition.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}		/**	 * 查询希财平台投资统计	 * @return	 * @throws Exception	 */	public void queryInvestXc(PageBean<Map<String, Object>> pageBean,String startdate,String enddate) throws Exception{		StringBuffer condition = new StringBuffer();		 		if(StringUtils.isNotBlank(startdate) && StringUtils.isNotBlank(enddate)){			condition.append("  and  datetime>='"+startdate+"' and datetime<='"+enddate+"'");		}		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_t_invest_xc", "*", "", condition.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}			/**	 * 广告商投资统计	 * @param pageBean	 * @param startdate	 * @throws Exception	 */	public void queryPartenersInvestSystatic(PageBean<Map<String, Object>> pageBean,long id,String time) throws Exception{		StringBuffer condition = new StringBuffer();		//条件		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_parteners_invest_systatic", "*", "", condition.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}		/**	 * 广告商注册统计	 * @param pageBean	 * @param startdate	 * @throws Exception	 */	public void queryPartenersRegSystatic(PageBean<Map<String, Object>> pageBean,long id,String time) throws Exception{		StringBuffer condition = new StringBuffer();		//条件		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_parteners_reg_systatic", "*", "", condition.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}			public long addParenersUser(long userId,long pid, String uid) throws Exception{		Connection conn = MySQL.getConnection();		long ret = -1L;		try {			ret = partenersDao.addParenersUser(conn, pid, uid, userId, new Date(), new Date());			if(ret>0){				conn.commit();			}		} catch (Exception e) {			conn.rollback();			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}				return ret;	}		public List<Map<String,Object>> queryPartenersUserByConditions(long userId) throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps= null;		try {			ps = partenersDao.queryPartenersUserByConditions(conn, userId);					} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}				return ps;	}		/**	 * 寻金会查看标的数据	 * @param flag 1:进行中的标的 2:满标	 * @param date 满标日期	 * @return	 * @throws Exception 	 */	public List<Map<String,Object>> getborrowData(int flag, String date) throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps;		try {			ps = partenersDao.getborrowData(conn, flag, date);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * 未来网贷查看标的数据	 * @param flag 1:进行中的标的 2:满标	 * @param date 满标日期	 * @return	 * @throws Exception 	 */	public List<Map<String,Object>> getborrowToWeilaiwd(int flag, String date) throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps;		try {			ps = partenersDao.getborrowToWeilaiwd(conn, flag, date);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * crLinshi	 * @return	 * @throws Exception 	 */	public List<Map<String,Object>> crLinshi() throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps;		try {			ps = partenersDao.crLinshi(conn);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * crLinshi更新	 * @return	 * @throws Exception 	 */	public Long updateLinshi(int id, String realName)	throws Exception {		Connection conn = MySQL.getConnection();		Long result = -1L;		try {			result = partenersDao.updateLinshi(conn, id, realName);			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}		return result;	}		/**	 * 寻金会查看单个标的投标列表	 * @return	 * @throws Exception 	 */	public List<Map<String,Object>> getInvestList(long borrowId) throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps;		try {			ps = partenersDao.getInvestList(conn, borrowId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**   	 * @throws DataException 	 * @throws SQLException 	 * @MethodName: queryInvestInfoById  	 * @Return:    	 * @Descb: 未来网贷根据借款id查询投资信息	 * @Throws:	*/	public List<Map<String,Object>> queryInvestInfoById(long borrowId) throws Exception{		Connection conn = MySQL.getConnection();		List<Map<String, Object>> ps;		try {			ps = partenersDao.queryInvestInfoById(conn, borrowId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return ps;	}		/**	 * 黄金投资网查看统计数据	 * @return	 * @throws Exception 	 */	public void dataProvidedToJintou(long pid ,String starTime, String endTime, PageBean pageBean) throws Exception{		starTime=com.shove.web.Utility.filteSqlInfusion(starTime);		endTime=com.shove.web.Utility.filteSqlInfusion(endTime);		StringBuffer conditions = new StringBuffer("");		if(pid>0){			conditions.append(" and pid = "+pid);		}		if (StringUtils.isNotBlank(starTime)) {			conditions.append(" and investTime >= '"+StringEscapeUtils.escapeSql(starTime)+"'") ;		}		if (StringUtils.isNotBlank(endTime)) {			conditions.append("  and investTime <='"+StringEscapeUtils.escapeSql(endTime)+"'") ;		}				Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, " v_parteners_user_info ", " * ",					" ", conditions.toString());			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}	}		/**	 * 添加广告商记录	 * 	 * @author 郭井超	 * @date 2015-04-14	 * @param type	 * @param remark	 * @param url	 * @param user_id	 * @param pid	 * @param amount	 * @param commission	 * @param operateTime	 * @param createTime	 * @return	 * @throws Exception	 */	public long addParenersMessage(int type,String remark,String url,            long user_id,int pid,double amount,double commission,            String operateTime,Date createTime) throws Exception{		Connection conn = MySQL.getConnection();		long ret = -1L;		try {			ret = partenersDao.addParenersMessage(conn, type, remark, url, user_id, pid, amount, commission, operateTime, createTime);			if(ret>0){				conn.commit();			}		} catch (Exception e) {			conn.rollback();			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}				return ret;	}			/**	 * 查询广告商记录	 * 	 * @author 郭井超	 * @date 2015-04-14	 * @param pageBean	 * @param pid	 * @param operateTime	 * @throws Exception	 */	public void queryParenersMessage(PageBean<Map<String, Object>> pageBean,int pid,String operateTime) throws Exception{		Connection conn = MySQL.getConnection();		try {			partenersDao.queryParenersMessage(conn, pageBean,pid,operateTime);			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}	}			public PartenersDao getPartenersDao() {		return partenersDao;	}	public void setPartenersDao(PartenersDao partenersDao) {		this.partenersDao = partenersDao;	}}
package com.sp2p.service;import java.sql.Connection;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.shove.Convert;import com.shove.base.BaseService;import com.shove.data.ConnectionManager;import com.shove.data.DataException;import com.shove.data.DataSet;import com.shove.data.dao.MySQL;import com.shove.util.BeanMapUtils;import com.shove.util.SMSUtil;import com.shove.vo.PageBean;import com.sp2p.constants.IConstants;import com.sp2p.dao.RecommendBrokerageListDao;import com.sp2p.dao.RecommendUserCountDao;import com.sp2p.dao.RecommendUserDao;import com.sp2p.dao.SettingActivityDao;import com.sp2p.dao.UserDao;import com.sp2p.service.admin.SMSInterfaceService;public class RecommendUserService extends BaseService {	public static Log log = LogFactory.getLog(RecommendUserService.class);	private RecommendUserDao recommendUserDao;	private ConnectionManager connectionManager;		private RecommendUserCountDao recommendUserCountDao;		private SettingActivityDao settingActivityDao;		private  RecommendBrokerageListDao recommendBrokerageListDao;		private UserDao userDao;	private SMSInterfaceService sMsService;		/**	 * 添加用户和推荐人关系	 * 	 * @param conn	 * @param userId	 * @param recommendUserId	 * @return Long	 * @throws Exception	 */	public Long addRecommendUser(long userId, long recommendUserId,int recommendSrc,int point)			throws Exception {		Connection conn = MySQL.getConnection();		Long id = -1L;		try {			id = recommendUserDao.addRecommendUser(conn, userId,					recommendUserId,recommendSrc,point);			if(id>0){				conn.commit();								// 处理电影票奖励//				processCinemaTicketReward(userId,recommendUserId);			}		} catch (Exception e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}		return id;	}		public long processCinemaTicketReward(long userId, long recommendUserId) throws Exception{		Connection conn = MySQL.getConnection();		long id = 0;		try {			Map<String, String> setting = settingActivityDao.getSettingActivity(conn,IConstants.ACTIVITY_RECONMMEND);			// 有推荐人 并且在活动期间 			if(setting!= null && setting.size()>0 && 					setting.get("is_ongoing").equals("true")){				Map<String,String> recommendBase = recommendBrokerageListDao.queryRecommendBase(conn,recommendUserId);				if(recommendBase != null){					int availableRecommendCount =0;					if((availableRecommendCount=Integer.parseInt(String.valueOf(recommendBase.get("availableRecommendCount"))))>0 	//					&& availableRecommendCount<IConstants.ACTIVITY_RECOMMEND_REG_MAX						){						int hasCountBeuse = Integer.parseInt(String.valueOf(recommendBase.get("hasCountBeuse")));						// 更新推荐机会						recommendUserCountDao.updateRecomendUserCount(conn, (int)recommendUserId,new Integer(hasCountBeuse+1),new Integer(availableRecommendCount-1));												// 更新推荐状态为有效						id = recommendUserDao.updateRecommendUser(conn, recommendUserId,userId, -1,1);												if(setting.get("process").equals("1") || setting.get("process").equals("2")// 活动的第一、二阶段								){							// 发放电影票 TODO：这里极端情况下会与投资奖励电影票产生并发问题							Map<String,String> cinemaTicketMap = recommendUserCountDao.queryRecommendCinemaTicketMin(conn);							if(cinemaTicketMap!=null && cinemaTicketMap.get("cinema_ticket")!=null && StringUtils.isNotBlank(cinemaTicketMap.get("cinema_ticket"))){								recommendUserCountDao.updateRecommendCinemaTicket(conn, Integer.parseInt(String.valueOf(userId)), Convert.strToInt(cinemaTicketMap.get("r_id"),0),1);								Map<String,String> userMap = userDao.queryUserById(conn, userId);								Map<String, String> map = sMsService.getSMSById(1);								StringBuffer content = new StringBuffer();								content.append("您的电影票兑换码为:");								content.append(cinemaTicketMap.get("cinema_ticket"));								content.append("，请登陆微信贷合作伙伴“蜘蛛网”进行在线选座");					            String retCode = SMSUtil.sendSMS(map.get("Account"), map.get("Password"), content.toString(), userMap.get("mobilePhone"), null);					            if ("Sucess".equals(retCode)) {					            	log.info("发送电影票成功！");					            }							}else{								recommendUserCountDao.insertRecommendCinemaTicket(conn, Integer.parseInt(String.valueOf(userId)),1);								log.info("电影票已经发送完毕！");							}						}else{							log.info("奖励活动第一阶段已经过去！");						}					}else{						log.info("推荐机会已用完！");					}				}else{					log.info("没有注册奖励资格，不予发放！");				}			}			conn.commit();		} catch (Exception e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}		return id;	}			public Map<String,String> queryRecommendUserCountInfoByUserId(long userId)throws Exception{		Connection conn = MySQL.getConnection();		Map<String,String> result = null;		try {			result = recommendUserCountDao.queryRecommendUserCountInfoByUserId(conn,userId);			conn.commit();		} catch (SQLException e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} catch (DataException e) {			e.printStackTrace();		} finally {			conn.close();		}				return result;	}	/**	 * 修改用户和推荐人关系	 * 	 * @param conn	 * @param id	 * @param vouchersId	 * @return Long	 * @throws Exception	 */	public Long updateRecommendUser(long id, long moneyTypeId) throws Exception {		Connection conn = MySQL.getConnection();		Long returnId = -1L;		try {			returnId = recommendUserDao.updateRecommendUser(conn, id,					moneyTypeId,0);			conn.commit();		} catch (SQLException e) {			log.error(e);			e.printStackTrace();			conn.rollback();			throw e;		} finally {			conn.close();		}		return returnId;	}	/**	 * 根据条件查询数据	 * 	 * @param conn	 * @param id编号	 * @param userId用户编号	 * @param recommendUserId推荐人编号	 * @param vouchersId礼劵编号	 * @return List<Map<String,Object>>	 * @throws DataException	 * @throws Exception	 */	public List<Map<String, Object>> queryRecommendUser(Long id, Long userId,			Long recommendUserId) throws Exception, DataException {		Connection conn = MySQL.getConnection();		List<Map<String, Object>> list = null;		try {			list = recommendUserDao.queryRecommendUser(conn, id, userId,					recommendUserId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return list;	}	/**	 * 根据邀请人Id查询所有被邀请人	 * 	 * @param recommendId	 * @return	 * @throws Exception	 * @throws DataException	 */	public List<Map<String, Object>> findRecommendUserByRecommendId(			Long recommendId) throws Exception {		Connection conn = MySQL.getConnection();		List<Map<String, Object>> list = null;		try {			list = recommendUserDao.findRecommendUserByRecommendId(conn,					recommendId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}		return list;	}	/**	 * 分页查询邀请好友列表	 * 	 * @param recommendId	 * @throws Exception	 * @throws DataException	 */	public void queryfindRecommendUserPage(PageBean pageBean, Long recommendId)			throws Exception {		Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_t_recommendfriend_list", "*", "",					"AND recommendUserId=" + recommendId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}	}	/**	 * 根据用户Id查询邀请人Id	 */	public Map<String, String> getRecommendUserByuserId(Long userId)			throws Exception {		Connection conn = MySQL.getConnection();		Map<String, String> map = null;		try {			map = recommendUserDao.getRecommendUserByuserId(conn, userId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}		return map;	}		/**	 * 根据用户Id查询邀请人Id	 */	public Map<String, String> getRecommendUserByUserName(String userName)			throws Exception {		Connection conn = MySQL.getConnection();		Map<String, String> map = null;		try {			Map<String,String> userMap = userDao.queryIdByUser(conn, userName);			if(userMap != null && userMap.size()>0){				map = recommendUserDao.getRecommendUserByuserId(conn, Long.parseLong(userMap.get("id")));			}		} catch (Exception e) {			log.error(e);			e.printStackTrace();		} finally {			conn.close();		}		return map;	}		public Map<String, String> queryFriendCost() throws Exception {		Map<String, String> map = null;		Connection conn = MySQL.getConnection();		try {			map = recommendUserDao.queryFriendCost(conn);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return map;	}		// 年终推广活动	public Map<String,String> queryMyTop(long userId)throws Exception{		Map<String, String> map = null;		Connection conn = MySQL.getConnection();		try {			map = recommendUserDao.queryMyTop(conn,userId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return map;	}		// 年终推广活动	public List<Map<String, Object>> queryMyTop()throws Exception{		List<Map<String, Object>> list = null;		Connection conn = MySQL.getConnection();		try {			list = recommendUserDao.queryMyTop(conn);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return list;	}		public void queryAllRecommendYearSummaryPage(PageBean<Map<String, Object>> pageBean,String userName,String realName) throws Exception{		StringBuffer condition = new StringBuffer();		 		if(StringUtils.isNotBlank(userName)){			condition.append(" and userName='"+userName+"'");		}				if(StringUtils.isNotBlank(realName)){			condition.append(" and realName='"+realName+"'");		}				Connection conn = MySQL.getConnection();		try {			dataPage(conn, pageBean, "v_recommend_year_top", "*", "", condition.toString());		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		}		// 推荐用户汇总	public Map<String,String> queryRecommendUserSummary(long recommendUserId)throws Exception{		Map<String, String> map = null;		Connection conn = MySQL.getConnection();		try {			map = recommendUserDao.queryRecommendUserSummary(conn,recommendUserId);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return map;	}		// 推荐用户列表	public List<Map<String, Object>> queryRecommendUserInfo(long recommendUserId,long start,int end)throws Exception{		List<Map<String, Object>> list = null;		Connection conn = MySQL.getConnection();		try {			list = recommendUserDao.queryRecommendUserInfo(conn,recommendUserId,start,end);		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return list;	}		// 推荐用户汇总	public long queryRecommendUserInfoCount(long recommendUserId)throws Exception{		Connection conn = MySQL.getConnection();		long count = 0;		try {			StringBuffer sql = new StringBuffer();			sql.append("select count(*) as userRUserCount from v_recommend_user_info ");			sql.append(" where recommendUserId="+recommendUserId);			DataSet ds = MySQL.executeQuery(conn, sql.toString());			Map<String,String> map = BeanMapUtils.dataSetToMap(ds);			if(map.containsKey("userRUserCount") &&					StringUtils.isNotBlank(map.get("userRUserCount"))){				count = Convert.strToLong(map.get("userRUserCount"), 0);			}		} catch (Exception e) {			log.error(e);			e.printStackTrace();			throw e;		} finally {			conn.close();		}		return count;	}		public RecommendUserDao getRecommendUserDao() {		return recommendUserDao;	}	public void setRecommendUserDao(RecommendUserDao recommendUserDao) {		this.recommendUserDao = recommendUserDao;	}	public ConnectionManager getConnectionManager() {		return connectionManager;	}	public void setConnectionManager(ConnectionManager connectionManager) {		this.connectionManager = connectionManager;	}		public SettingActivityDao getSettingActivityDao() {		return settingActivityDao;	}	public void setSettingActivityDao(SettingActivityDao settingActivityDao) {		this.settingActivityDao = settingActivityDao;	}	public RecommendUserCountDao getRecommendUserCountDao() {		return recommendUserCountDao;	}	public void setRecommendUserCountDao(RecommendUserCountDao recommendUserCountDao) {		this.recommendUserCountDao = recommendUserCountDao;	}	public RecommendBrokerageListDao getRecommendBrokerageListDao() {		return recommendBrokerageListDao;	}	public void setRecommendBrokerageListDao(			RecommendBrokerageListDao recommendBrokerageListDao) {		this.recommendBrokerageListDao = recommendBrokerageListDao;	}	public UserDao getUserDao() {		return userDao;	}	public void setUserDao(UserDao userDao) {		this.userDao = userDao;	}	public SMSInterfaceService getsMsService() {		return sMsService;	}	public void setsMsService(SMSInterfaceService sMsService) {		this.sMsService = sMsService;	}}
package com.sp2p.action.front;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.shove.Convert;
import com.shove.data.DataException;
import com.shove.web.util.DesSecurityUtil;
import com.shove.web.util.JSONUtils;
import com.sp2p.constants.IConstants;
import com.sp2p.entity.Operator;
import com.sp2p.entity.User;
import com.sp2p.service.MyHomeService;
import com.sp2p.service.SelectedService;

/**
 * @ClassName: FrontMyHomeAction.java
 * @Author: gang.lv
 * @Date: 2013-3-13 下午10:21:30
 * @Copyright: 2013 www.emis.com Inc. All rights reserved.
 * @Version: V1.0.1
 * @Descrb: 我的主页控制层
 */
public class FrontMyHomeAction extends BaseFrontAction {

	public static Log log = LogFactory.getLog(FrontMyHomeAction.class);
	private static final long serialVersionUID = 1L;

	private MyHomeService myHomeService;
	private SelectedService selectedService;
	private List<Map<String, Object>> borrowDeadlineList;
	private Map<String, String> automaticBidMap;
	private List<Operator> checkList;

	/**
	 * 上传个人头像
	 * 
	 */
	public String pastpicture() {
		return SUCCESS;
	}
	
	/**
	 * @throws Exception
	 * @MethodName: homeInit
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-18 下午08:53:19
	 * @Return:
	 * @Descb: 我的主页初始化
	 * @Throws:
	 */
	public String homeInit() throws Exception {
		User user = (User) session().getAttribute("user");
//		Map<String, String> homeMap = myHomeService.queryHomeInfo(user.getId());
//		request().setAttribute("homeMap", homeMap);
//		Map<String, String> repayMap = myHomeService.queryRepaymentByOwner(user.getId());
//		request().setAttribute("repayMap", repayMap);
//		
		/**当前账户金额基本信息*/
		Map<String, String> accmountStatisMap = myHomeService.queryAccountStatisInfo(user.getId());
		request().setAttribute("accmountStatisMap", accmountStatisMap);
		
		/**未来30天的还款情况 */
		pageBean.setPageSize(5);
		pageBean.setPageNum(request().getParameter("curPage"));
		myHomeService.queryRepayPlanCondition(user.getId(), pageBean);
	 
		/**个人理财统计和回报统计*/
		Map<String, String> financeStatisMap = myHomeService.queryFinanceStatis(user.getId());
		request().setAttribute("financeStatisMap", financeStatisMap);
		
		return "success";
	}

	/**
	 * @MethodName: homeBorrowPublishInit
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-18 下午08:53:29
	 * @Return:
	 * @Descb: 已经发布的借款初始化
	 * @Throws:
	 */
	public String homeBorrowPublishInit() {
		return "success";
	}

	/**
	 * @throws Exception
	 * @MethodName: loanStatisInit
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-26 下午02:57:19
	 * @Return:
	 * @Descb: 借款统计
	 * @Throws:
	 */
	public String loanStatisInit() throws Exception {
		User user = (User) session().getAttribute("user");
		Map<String, String> loanStatisMap = myHomeService.queryLoanStatis(user
				.getId());
		request().setAttribute("loanStatisMap", loanStatisMap);
		return "success";
	}

	/**
	 * @throws DataException
	 * @throws SQLException
	 * @MethodName: financeStatisInit
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-26 下午02:57:31
	 * @Return:
	 * @Descb: 理财统计
	 * @Throws:
	 */
	public String financeStatisInit() throws SQLException, DataException {
		User user = (User) session().getAttribute("user");
		Map<String, String> financeStatisMap = myHomeService
				.queryFinanceStatis(user.getId());
		request().setAttribute("financeStatisMap", financeStatisMap);
		return "success";
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowBackAcount
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-4-2 上午09:12:22
	 * @Return:
	 * @Descb: 查询借款回账
	 * @Throws:
	 */
	public String homeBorrowBackAcount() throws Exception {
		User user = (User) session().getAttribute("user");
		JSONObject obj = new JSONObject();
		String title = paramMap.get("title") == null ? "" : paramMap
				.get("title");
		String publishTimeStart = paramMap.get("publishTimeStart") == null ? ""
				: paramMap.get("publishTimeStart");
		if (StringUtils.isNotBlank(publishTimeStart)) {
			publishTimeStart = publishTimeStart + " 00:00:00";
		}
		String publishTimeEnd = paramMap.get("publishTimeEnd") == null ? ""
				: paramMap.get("publishTimeEnd");
		if (StringUtils.isNotBlank(publishTimeStart)) {
			publishTimeEnd = publishTimeEnd + " 23:59:59";
		}
		Map<String, String> map = myHomeService.queryBackAcountStatis(user
				.getId(), publishTimeStart, publishTimeEnd, title);
		String allForPIOneMonth = map.get("allForPIOneMonth") == null ? "0"
				: map.get("allForPIOneMonth");
		String allForPIThreeMonth = map.get("allForPIThreeMonth") == null ? "0"
				: map.get("allForPIThreeMonth");
		String allForPIYear = map.get("allForPIYear") == null ? "0" : map
				.get("allForPIYear");
		String allForPI = map.get("allForPI") == null ? "0" : map
				.get("allForPI");
		obj.put("allForPIOneMonth", allForPIOneMonth);
		obj.put("allForPIThreeMonth", allForPIThreeMonth);
		obj.put("allForPIYear", allForPIYear);
		obj.put("allForPI", allForPI);
		JSONUtils.printObject(obj);
		return null;
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowInvestList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-26 下午08:40:13
	 * @Return:
	 * @Descb: 投资借款列表
	 * @Throws:
	 */
	public String homeBorrowInvestList() throws Exception {
		User user = (User) session().getAttribute("user");
		Map<String, String> accmountStatisMap = myHomeService
			.queryAccountStatisInfo(user.getId());
		request().setAttribute("accmountStatisMap", accmountStatisMap);
		pageBean.setPageNum(request.getString("curPage"));

		String borrowStatus = IConstants.BORROW_STATUS_4 + ","
					+ IConstants.BORROW_STATUS_5;

		String title = request.getString("title");
		String publishTimeStart = request.getString("publishTimeStart");
		String publishTimeEnd = request.getString("publishTimeEnd");
		myHomeService.queryBorrowInvestByCondition(title, publishTimeStart,
				publishTimeEnd, borrowStatus, user.getId(), pageBean, 0);
		List<Map<String, Object>> lists = pageBean.getPage();
		DesSecurityUtil des = new DesSecurityUtil();
		if (lists != null) {
			String borrowId = "";
			String encBorrowId = "";
			String typeId = "";
			String investId = "";
			String encInvestId = "";
			//whb 购买债权时持有期数
			String debtline = "";
			for (Map<String, Object> map : lists) {
				
				borrowId = map.get("borrowId")+"";
				encBorrowId = des.encrypt(borrowId);
				map.put("encBorrowId", encBorrowId);
				
				typeId = des.encrypt("1");
				map.put("encTypeId", typeId);
				
				investId = map.get("id")+"";
				encInvestId = des.encrypt(investId);
				map.put("encInvestId", encInvestId);
				
//				if("2".equals(String.valueOf(map.get("isDebt")))){
//					String arr[] = String.valueOf(map.get("debtline")).split("/");
//					debtline = String.valueOf(Integer.parseInt(arr[1]) - Integer.parseInt(arr[0]) + 1); 
//				}
				debtline = map.get("debtline")+"";
				map.put("debtline", debtline);
			}
		}
		this.setRequestToParamMap();
		return SUCCESS;
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowInvestList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-26 下午08:40:13
	 * @Return:
	 * @Descb: 招标中的借款
	 * @Throws:
	 */
	public String homeBorrowTenderInList() throws Exception {
		User user = (User) session().getAttribute("user");
		Map<String, String> accmountStatisMap = myHomeService
			.queryAccountStatisInfo(user.getId());
		request().setAttribute("accmountStatisMap", accmountStatisMap);
		pageBean.setPageNum(request.getString("curPage"));
		String borrowStatus = IConstants.BORROW_STATUS_2 + "";

		String title = request.getString("title");
		String publishTimeStart = request.getString("publishTimeStart");
		String publishTimeEnd = request.getString("publishTimeEnd");
		myHomeService.queryBorrowInvestByCondition(title, publishTimeStart,
				publishTimeEnd, borrowStatus, user.getId(), pageBean, 1);
		this.setRequestToParamMap();
		return SUCCESS;
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowRecycleList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-26 下午08:41:47
	 * @Return:
	 * @Descb: 待回收借款列表
	 * @Throws:
	 */
	public String homeBorrowRecycleList() throws Exception {
		User user = (User) session().getAttribute("user");
		Map<String, String> accmountStatisMap = myHomeService
			.queryAccountStatisInfo(user.getId());
		request().setAttribute("accmountStatisMap", accmountStatisMap);
		pageBean.setPageNum(request.getString("curPage"));
		String title = request.getString("title");
		myHomeService.queryBorrowRecycleByCondition(title, user.getId(),
				pageBean);
		//whb添加查看协议
		List<Map<String, Object>> lists = pageBean.getPage();
		DesSecurityUtil des = new DesSecurityUtil();
		String borrowId = "";
		String typeId = "";
		String investid = "";
		String encBorrowId = "";
		String encInvestId = "";
		if (lists != null) {
			for (Map<String, Object> map : lists) {
				
				borrowId = map.get("borrowId")+"";
				encBorrowId = des.encrypt(borrowId);
				map.put("encBorrowId", encBorrowId);
				
				if("2".equals(String.valueOf(map.get("isDebt")))){
					typeId = des.encrypt("24");
					String debtId = map.get("debtId") + "";
					String encDebtId = des.encrypt(debtId);
					map.put("encDebtId", encDebtId);
				}else{
					typeId = des.encrypt("1");
				}
				map.put("encTypeId", typeId);
				
				investid = map.get("bid")+"";
				encInvestId = des.encrypt(investid);
				map.put("encInvestId", encInvestId);
			}
		}
		this.setRequestToParamMap();
		return "success";
	}
	
	public String recycleInfo() throws Exception{
		pageBean.setPageNum(1);
		pageBean.setPageSize(1);
		User user = (User) session().getAttribute("user");
		myHomeService.queryBorrowRecycleByCondition("", user.getId(),
				pageBean);
		List<HashMap<String,Object>> list = pageBean.getPage();
		long borrowId = -1L;
		long beanId = -1L;
		if(list!=null&&list.size()>0){
			borrowId = Convert.strToLong(list.get(0).get("borrowId")+"", -1);
			beanId = Convert.strToLong(list.get(0).get("id")+"", -1);
		}
		if(borrowId>0&&beanId>0){
			List<Map<String, Object>> listMap = myHomeService
			.queryBorrowForpayById(borrowId, user.getId(), beanId);
			HashMap<String, Object> recycleMap = (HashMap) listMap.get(0);
			String date = recycleMap.get("repayDate")+"";
			String month = "";
			String day = "";
			String maxDay = "";
			if(!"".equals(date)){
				String yymmdd[] = date.split("-");
				month = yymmdd[1];
				day = yymmdd[2];
				recycleMap.put("month", month);
				recycleMap.put("day", day);
				if("2".equals(month)){
					maxDay = "28";
				}else if("1".equals(month)||"3".equals(month)||"5".equals(month)||"7".equals(month)||"8".equals(month)||"10".equals(month)||"12".equals(month)){
					maxDay = "31";
				}else{
					maxDay = "30";
				}
				recycleMap.put("maxDay", maxDay);
			}
			request().setAttribute("recycleMap", recycleMap);
		}else {
			Calendar cal = Calendar.getInstance();
			int nowday = cal.get(Calendar.DAY_OF_MONTH);
			int nowmonth = cal.get(Calendar.MONTH )+1;
			int maxDay1=cal.getActualMaximum(Calendar.DATE);
			request().setAttribute("nowday", nowday);
			request().setAttribute("nowmonth", nowmonth);
			request().setAttribute("maxDay1", maxDay1);
		}
		return "success";
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowRecycledList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-27 下午01:40:27
	 * @Return:
	 * @Descb: 已回收的借款
	 * @Throws:
	 */
	public String homeBorrowRecycledList() throws Exception {
		User user = (User) session().getAttribute("user");
		Map<String, String> accmountStatisMap = myHomeService
			.queryAccountStatisInfo(user.getId());
		request().setAttribute("accmountStatisMap", accmountStatisMap);
		pageBean.setPageNum(request.getString("curPage"));
		String title = request.getString("title");
		myHomeService.queryBorrowRecycledByCondition(title, user.getId(),
				pageBean);
		//whb添加查看协议
//		List<Map<String, Object>> lists = pageBean.getPage();
//		DesSecurityUtil des = new DesSecurityUtil();
//		if (lists != null) {
//			for (Map<String, Object> map : lists) {
//				
//				String borrowId = map.get("borrowId")+"";
//				String encBorrowId = des.encrypt(borrowId);
//				map.put("encBorrowId", encBorrowId);
//				
//				String typeId = des.encrypt("1");
//				map.put("encTypeId", typeId);
//				
//				String investId = map.get("bid")+"";
//				String encInvestId = des.encrypt(investId);
//				map.put("encInvestId", encInvestId);
//			}
//		}
		this.setRequestToParamMap();
		return "success";
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowForpayDetail
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-27 下午06:53:03
	 * @Return:
	 * @Descb: 查询投资人回收中借款还款详情
	 * @Throws:
	 */
	public String homeBorrowForpayDetail() throws Exception {
		User user = (User) session().getAttribute("user");
		//借款id
		String minId = request.getString("minId") == null ? "" : request.getString("minId");
		//投资id
		String investId = request.getString("investId") == null ? "" : request.getString("investId");
		long minIdLong = Convert.strToLong(minId, -1);
		long investIdLong = Convert.strToLong(investId, -1);
		List<Map<String, Object>> listMap = myHomeService
				.queryBorrowForpayById(minIdLong, user.getId(), investIdLong);
		request().setAttribute("listMap", listMap);
		
		long borrowId = Convert.strToLong(request.getString("borrowId"), 0);
		Map<String,String> map = myHomeService.queryUserName(borrowId);
		String jk_state = "0";
		if(map!=null && map.size()>0){
			request().setAttribute("jk_user_name", map.get("username"));
			jk_state = "1";
		}
		request().setAttribute("jk_state",jk_state);
		
		return "success";
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowHaspayDetail
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-27 下午06:57:20
	 * @Return:
	 * @Descb: 查询投资人已回收借款还款详情
	 * @Throws:
	 */
	public String homeBorrowHaspayDetail() throws Exception {
		User user = (User) session().getAttribute("user");
		String borrowId = request.getString("borrowId") == null ? "" : request.getString("borrowId");
		String investId = request.getString("investId") == null ? "" : request.getString("investId");

		long borrowIdLong = Convert.strToLong(borrowId, -1);
		long investIdLong = Convert.strToLong(investId, -1);
		List<Map<String, Object>> listMap = myHomeService
				.queryBorrowHaspayById(borrowIdLong, user.getId(), investIdLong);
		request().setAttribute("listMap", listMap);
		return "success";
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowBackAcountList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-26 下午08:43:24
	 * @Return:
	 * @Descb: 借款回账查询列表
	 * @Throws:
	 */
	public String homeBorrowBackAcountList() throws Exception {
		User user = (User) session().getAttribute("user");

		Map<String, String> backAcountStatisMap = myHomeService
				.queryBackAcountStatis(user.getId(), "", "", "");
		request().setAttribute("backAcountStatisMap", backAcountStatisMap);
		// 回账类型
		request().setAttribute("type", "5");

		pageBean.setPageNum(request.getString("curPage"));
		String title = request.getString("title");
		String publishTimeStart = request.getString("publishTimeStart");
		String publishTimeEnd = request.getString("publishTimeEnd");
		myHomeService.queryBorrowBackAcountByCondition(title, publishTimeStart,
				publishTimeEnd, user.getId(), pageBean);
		DesSecurityUtil des = new DesSecurityUtil();
		List<Map<String, Object>> lists = pageBean.getPage();
		if (lists != null) {
			for (Map<String, Object> map : lists) {
				String borrowId = map.get("borrowId")+"";
				String encBorrowId = des.encrypt(borrowId);
				map.put("encBorrowId", encBorrowId);
				
				String investId = map.get("investId")+"";
				String encInvestId = des.encrypt(investId);
				map.put("encInvestId", encInvestId);
				
				String typeId = "1";
				String encTypeId = des.encrypt(typeId);
				map.put("encTypeId", encTypeId);
				
				String styles ="1";
				String encStyles = des.encrypt(styles);
				map.put("encStyles", encStyles);
				
			}
		}
		this.setRequestToParamMap();
		return SUCCESS;
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowPublishList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-18 下午09:03:01
	 * @Return:
	 * @Descb: 审核中的借款
	 * @Throws:
	 */
	public String homeBorrowAuditList() throws Exception {
		String borrowStatus = IConstants.BORROW_STATUS_1 + ","
				+ IConstants.BORROW_STATUS_3;
		return queryBrrowPublishList(borrowStatus);
	}

	/**
	 * @throws Exception
	 * @MethodName: homeBorrowPublishList
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-18 下午09:03:01
	 * @Return:
	 * @Descb: 已经发布的借款列表
	 * @Throws:
	 */
	public String homeBorrowingList() throws Exception {
		String borrowStatus = "" + IConstants.BORROW_STATUS_2;
		return queryBrrowPublishList(borrowStatus);
	}

	private String queryBrrowPublishList(String borrowStatus) throws Exception {
		User user = (User) session().getAttribute("user");
		pageBean.setPageNum(request.getString("curPage"));
		pageBean.setPageSize(1);
		String title = request.getString("title");
		String publishTimeStart = request.getString("publishTimeStart");
		String publishTimeEnd = request.getString("publishTimeEnd");
		myHomeService.queryBorrowFinishByCondition(title, publishTimeStart,
				publishTimeEnd, borrowStatus, user.getId(), pageBean);
		this.setRequestToParamMap();
		return SUCCESS;
	}

	/**
	 * @MethodName: automaticBidInit
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-28 下午03:09:53
	 * @Return:
	 * @Descb: 查询用户自动投标设置
	 * @Throws:
	 */
	public String automaticBidInit() throws SQLException, DataException {
		return "success";
	}
	
	/**
	 * 预约投标首页
	 * @return
	 * @throws SQLException
	 * @throws DataException
	 */
	public String bespeakInvest() throws Exception {
		User user = (User) session().getAttribute("user");
		List<Map<String, Object>> list = myHomeService.queryAppointInvestRecond(user.getId());
		pageBean.setPage(list);
		request().setAttribute("pageBean", pageBean);
		return "success";
	}
	
	/**
	 * 添加自动投标
	 * @return
	 */
	public String addAppointInvest()throws Exception{
		JSONObject obj = new JSONObject();
		User user = (User) session().getAttribute("user");
		int type = 4;//4-定息宝
		int limits = Convert.strToInt(request().getParameter("limits"), 0);//期限
		double rate = Convert.strToDouble(request().getParameter("rate"), 0);
		int state = Convert.strToInt(request().getParameter("state"), 0);
		String moeny = request().getParameter("amount");
		double amount = Convert.strToDouble(request().getParameter("amount"), 0);
		double usableSum = Convert.strToDouble(request().getParameter("usableSum"), 0);
		boolean flag = moeny.matches("^[1-9][0-9]*$");
		if(!flag){
			obj.put("msg", "预约金额必须是整数");
			JSONUtils.printObject(obj);
			return null;
		}
		
		if(amount<1000 || amount>100000){
			obj.put("msg", "预约金额在1000~100000元");
			JSONUtils.printObject(obj);
			return null;
		}
		
		
		if(amount-usableSum>0){
			obj.put("msg", "预约金额不能大于可用余额");
			JSONUtils.printObject(obj);
			return null;
		}
		
		long m = -1;
		try {
			Map<String, String> map = myHomeService.queryAppointInvest(user.getId());
			if(map!=null && map.size()>0){
				obj.put("msg", "您已经预约过了，请等待系统投标");
				JSONUtils.printObject(obj);
				return null;
			}
			
			m = myHomeService.addAppointInvest(type, limits, rate, amount, state, user.getId());
			if (m > 0) {
				obj.put("m", "1");
				obj.put("msg", "预约成功");
			} else {
				obj.put("msg", "预约失败");
			}
			
		JSONUtils.printObject(obj);
		
		} catch (Exception e) {
			 e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 删除预约投标
	 * @return
	 * @throws Exception
	 */
	public String removeAppointInvest()throws Exception{
		JSONObject obj = new JSONObject();
		long id = Convert.strToLong(request().getParameter("id"), 0);//期限
		try {
		   long m = myHomeService.removeAppointInvest(id);
		   if(m>0){
			   obj.put("m", "1");
			   obj.put("msg", "取消成功");
		   }else{
			   obj.put("msg", "取消失败");
		   }
		} catch (Exception e) {
			 e.printStackTrace();
		}
		JSONUtils.printObject(obj);
		return null;
	}
	
	
	/**
	 * @throws Exception
	 * @MethodName: automaticBidSet
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-28 下午04:33:53
	 * @Return:
	 * @Descb: 自动投标设置
	 * @Throws:
	 */
	public String automaticBidSet() throws Exception {
		String bidStatus = paramMap.get("s") == null ? "1" : paramMap.get("s");
		long bidStatusLong = Convert.strToLong(bidStatus, 1);
		JSONObject obj = new JSONObject();
		User user = (User) session().getAttribute("user");
		long returnId = -1;
		returnId = myHomeService.automaticBidSet(bidStatusLong, user.getId());

		if (returnId <= 0) {
			obj.put("msg", "未保存自动投标设置");
		} else {
			obj.put("msg", 1);
		}
		JSONUtils.printObject(obj);
		return null;
	}
	
	/**
	 * 获取用户的可用余额
	 * @return
	 * @throws Exception
	 */
	public String getUserAccount() throws Exception{
		JSONObject obj = new JSONObject();
		User user = (User) session().getAttribute("user");
		Map<String, String> accmountStatisMap = myHomeService
				.queryAccountStatisInfo(user.getId());
		obj.put("userAccount", accmountStatisMap.get("usableAmount"));
		JSONUtils.printObject(obj);
		return null;
	}

	/**
	 * @throws Exception
	 * @MethodName: automaticBidModify
	 * @Param: FrontMyHomeAction
	 * @Author: gang.lv
	 * @Date: 2013-3-28 下午05:04:24
	 * @Return:
	 * @Descb: 修改自动投标内容
	 * @Throws:
	 */
	public String automaticBidModify() throws Exception {
		JSONObject obj = new JSONObject();
		User user = (User) session().getAttribute("user");
		long returnId = -1;

		double usableSum = Convert.strToDouble(paramMap.get("usableSum"), 0);
		String bidAmount = paramMap.get("bidAmount") == null ? "" : paramMap
				.get("bidAmount");
		String rateStart = paramMap.get("rateStart") == null ? "" : paramMap
				.get("rateStart");
		String rateEnd = paramMap.get("rateEnd") == null ? "" : paramMap
				.get("rateEnd");
		String deadlineStart = paramMap.get("deadlineStart") == null ? ""
				: paramMap.get("deadlineStart");
		String deadlineEnd = paramMap.get("deadlineEnd") == null ? ""
				: paramMap.get("deadlineEnd");
		String creditStart = paramMap.get("creditStart") == null ? ""
				: paramMap.get("creditStart");
		String creditEnd = paramMap.get("creditEnd") == null ? "" : paramMap
				.get("creditEnd");
		String remandAmount = paramMap.get("remandAmount") == null ? ""
				: paramMap.get("remandAmount");
		String borrowWay = paramMap.get("borrowWay") == null ? "" : paramMap
				.get("borrowWay");
		Double bidAmountDouble = Convert.strToDouble(bidAmount, 0);
		Double rateStartDouble = Convert.strToDouble(rateStart, 0);
		Double rateEndDouble = Convert.strToDouble(rateEnd, 0);
		Double deadlineStartDouble = Convert.strToDouble(deadlineStart, 0);
		Double deadlineEndDouble = Convert.strToDouble(deadlineEnd, 0);
		Double creditStartDouble = Convert.strToDouble(creditStart, 0);
		Double creditEndDouble = Convert.strToDouble(creditEnd, 0);
		Double remandAmountDouble = Convert.strToDouble(remandAmount, 0);

		if (StringUtils.isBlank(bidAmount)) {
			obj.put("msg", "每次投标金额不可为空");
			JSONUtils.printObject(obj);
			return null;
		} else if (bidAmountDouble == 0) {
			obj.put("msg", "每次投标金额格式错误");
			JSONUtils.printObject(obj);
			return null;
		} else if (bidAmountDouble < 1000) {
			obj.put("msg", "每次投标金额不能低于1000元");
			JSONUtils.printObject(obj);
			return null;
		}
		if (StringUtils.isBlank(rateStart)) {
			obj.put("msg", "利率范围开始不可为空");
			JSONUtils.printObject(obj);
			return null;
		} else if (rateStartDouble == 0) {
			obj.put("msg", "利率范围开始格式错误");
			JSONUtils.printObject(obj);
			return null;
		} else if (rateStartDouble < 0.1 || rateStartDouble > 24) {
			obj.put("msg", "利率范围0.1%~24%");
			JSONUtils.printObject(obj);
			return null;
		}
		if (StringUtils.isBlank(rateEnd)) {
			obj.put("msg", "利率范围结束不可为空");
			JSONUtils.printObject(obj);
			return null;
		} else if (rateEndDouble == 0) {
			obj.put("msg", "利率范围结束格式错误");
			JSONUtils.printObject(obj);
			return null;
		} else if (rateEndDouble < 0.1 || rateEndDouble > 24) {
			obj.put("msg", "利率范围0.1%~24%");
			JSONUtils.printObject(obj);
			return null;
		}
		if (StringUtils.isBlank(remandAmount)) {
			obj.put("msg", "账户保留金额不可为空");
			JSONUtils.printObject(obj);
			return null;
		} else if (remandAmountDouble <= 0) {
			obj.put("msg", "账户保留金额格式错误");
			JSONUtils.printObject(obj);
			return null;
		}
		if (StringUtils.isBlank(borrowWay)) {
			obj.put("msg", "请勾选借款类型");
			JSONUtils.printObject(obj);
			return null;
		}
		if (bidAmountDouble > usableSum - remandAmountDouble) {
			obj.put("msg", "投标金额不能大于(可用余额 - 保底金额)");
			JSONUtils.printObject(obj);
			return null;
		}
		returnId = myHomeService.automaticBidModify(bidAmountDouble,
				rateStartDouble, rateEndDouble, deadlineStartDouble,
				deadlineEndDouble, creditStartDouble, creditEndDouble,
				remandAmountDouble, user.getId(), borrowWay);

		if (returnId <= 0) {
			obj.put("msg", IConstants.ACTION_FAILURE);
		} else {
			obj.put("msg", IConstants.ACTION_SUCCESS);
		}
		JSONUtils.printObject(obj);
		return null;

	}

	public MyHomeService getMyHomeService() {
		return myHomeService;
	}

	public void setMyHomeService(MyHomeService myHomeService) {
		this.myHomeService = myHomeService;
	}

	public SelectedService getSelectedService() {
		return selectedService;
	}

	public void setSelectedService(SelectedService selectedService) {
		this.selectedService = selectedService;
	}

	public List<Map<String, Object>> getBorrowDeadlineList() throws Exception {
		if (borrowDeadlineList == null) {
			// 借款期限列表
			borrowDeadlineList = selectedService.borrowDeadline();
		}
		return borrowDeadlineList;
	}

	public Map<String, String> getAutomaticBidMap() throws Exception {
		if (automaticBidMap == null) {
			// 自动投标设置
			User user = (User) session().getAttribute("user");
			automaticBidMap = myHomeService.queryAutomaticBid(user.getId());
			checkList = new ArrayList<Operator>();
			if (automaticBidMap != null) {
				// 设置ckBoxList的选中值
				String borrowWay = automaticBidMap.get("borrowWay");
				String[] ckList = borrowWay.split(",");
				if (ckList.length > 0) {
					for (String ck : ckList) {
						checkList.add(new Operator(ck, ""));
					}
				}
			}
		}
		return automaticBidMap;
	}

	public List<Operator> getCheckList() {
		return checkList;
	}

}
